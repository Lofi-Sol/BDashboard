name: Bet Confirmation Processor

on:
  schedule:
    # Run every 5 minutes (more frequent than log fetching)
    - cron: '*/5 * * * *'
  workflow_dispatch: # Allow manual triggering
  push:
    paths:
      - '.github/workflows/bet-confirmation-processor.yml'
      - 'data/bet-logs.json'

jobs:
  process-bet-confirmations:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Process Bet Confirmations
      id: process-confirmations
      run: |
        echo "🔍 Processing bet confirmations..."
        
        # Create data directory if it doesn't exist
        mkdir -p data
        
        # Process bet confirmations
        node -e "
        const fs = require('fs');
        
        try {
          // Load bet logs
          let betLogsData = { bet_logs: [], processed_logs: [], metadata: {} };
          try {
            const betLogsContent = fs.readFileSync('data/bet-logs.json', 'utf8');
            betLogsData = JSON.parse(betLogsContent);
          } catch (error) {
            console.log('No bet-logs.json found');
            process.exit(0);
          }
          
          // Load bets data
          let betsData = { active_bets: [], completed_bets: [], statistics: {}, metadata: {} };
          try {
            const betsContent = fs.readFileSync('data/bets.json', 'utf8');
            betsData = JSON.parse(betsContent);
          } catch (error) {
            console.log('No bets.json found, creating new file');
          }
          
          // Find unprocessed bet logs
          const unprocessedBetLogs = betLogsData.bet_logs.filter(log => !log.processed);
          console.log(`Found ${unprocessedBetLogs.length} unprocessed bet logs`);
          
          let confirmationsProcessed = 0;
          let newBetsAdded = 0;
          
          // Process each unprocessed bet log
          unprocessedBetLogs.forEach(betLog => {
            // Check if this bet already exists in active bets
            const existingBet = betsData.active_bets.find(bet => bet.betId === betLog.betId);
            
            if (existingBet) {
              // Update existing bet status to confirmed
              existingBet.status = 'confirmed';
              existingBet.logId = betLog.logId;
              existingBet.confirmedAt = betLog.timestamp * 1000; // Convert to milliseconds
              existingBet.senderId = betLog.sender;
              existingBet.confirmedBy = betLog.sender;
              
              console.log(`✅ Confirmed existing bet: ${betLog.betId} (War: ${betLog.warId}, Faction: ${betLog.factionId}, Xanax: ${betLog.xanaxAmount})`);
              confirmationsProcessed++;
            } else {
              // Create new bet entry from log
              const newBet = {
                betId: betLog.betId,
                playerId: betLog.sender,
                warId: betLog.warId,
                factionId: betLog.factionId,
                xanaxAmount: betLog.xanaxAmount,
                betAmount: betLog.xanaxAmount * 744983, // Xanax price
                status: 'confirmed',
                timestamp: betLog.timestamp * 1000,
                logId: betLog.logId,
                confirmedAt: betLog.timestamp * 1000,
                senderId: betLog.sender,
                confirmedBy: betLog.sender,
                message: betLog.message
              };
              
              betsData.active_bets.unshift(newBet);
              console.log(`➕ Added new confirmed bet: ${betLog.betId} (War: ${betLog.warId}, Faction: ${betLog.factionId}, Xanax: ${betLog.xanaxAmount})`);
              newBetsAdded++;
            }
            
            // Mark bet log as processed
            betLog.processed = true;
          });
          
          // Update statistics
          const pendingBets = betsData.active_bets.filter(bet => bet.status === 'pending');
          const confirmedBets = betsData.active_bets.filter(bet => bet.status === 'confirmed');
          const wonBets = betsData.active_bets.filter(bet => bet.status === 'won');
          const lostBets = betsData.active_bets.filter(bet => bet.status === 'lost');
          
          betsData.statistics = {
            total_bets: betsData.active_bets.length + betsData.completed_bets.length,
            total_volume: betsData.active_bets.reduce((sum, bet) => sum + (bet.betAmount || 0), 0),
            pending_bets: pendingBets.length,
            confirmed_bets: confirmedBets.length,
            won_bets: wonBets.length,
            lost_bets: lostBets.length,
            total_payouts: wonBets.reduce((sum, bet) => sum + (bet.payoutAmount || 0), 0),
            total_profit: wonBets.reduce((sum, bet) => sum + (bet.payoutAmount || 0), 0) - 
                         lostBets.reduce((sum, bet) => sum + (bet.betAmount || 0), 0),
            last_updated: new Date().toISOString()
          };
          
          // Update metadata
          const uniqueUsers = new Set(betsData.active_bets.map(bet => bet.playerId));
          betsData.metadata = {
            version: '1.0',
            last_updated: new Date().toISOString(),
            total_users: uniqueUsers.size,
            active_users: uniqueUsers.size
          };
          
          // Update bet logs metadata
          betLogsData.metadata = {
            last_updated: new Date().toISOString(),
            total_bet_logs: betLogsData.bet_logs.length,
            total_processed_logs: betLogsData.processed_logs.length,
            new_bet_logs_found: 0,
            new_processed_logs: 0,
            run_timestamp: new Date().toISOString(),
            confirmations_processed: confirmationsProcessed,
            new_bets_added: newBetsAdded
          };
          
          // Save updated data
          fs.writeFileSync('data/bets.json', JSON.stringify(betsData, null, 2));
          fs.writeFileSync('data/bet-logs.json', JSON.stringify(betLogsData, null, 2));
          
          console.log('✅ Bet confirmations processed');
          console.log(`Confirmations processed: ${confirmationsProcessed}`);
          console.log(`New bets added: ${newBetsAdded}`);
          console.log(`Total active bets: ${betsData.active_bets.length}`);
          console.log(`Pending bets: ${pendingBets.length}`);
          console.log(`Confirmed bets: ${confirmedBets.length}`);
          
          // Output summary for GitHub Actions
          const summary = {
            confirmations_processed: confirmationsProcessed,
            new_bets_added: newBetsAdded,
            total_active_bets: betsData.active_bets.length,
            pending_bets: pendingBets.length,
            confirmed_bets: confirmedBets.length,
            total_users: uniqueUsers.size
          };
          
          console.log('summary<<EOF');
          console.log(JSON.stringify(summary, null, 2));
          console.log('EOF');
          
        } catch (error) {
          console.error('❌ Error processing bet confirmations:', error);
          process.exit(1);
        }
        "
        
    - name: Create Confirmation Summary
      id: create-summary
      run: |
        echo "📊 Creating confirmation summary..."
        
        # Load the processed data
        if [ -f "data/bets.json" ]; then
          SUMMARY=$(node -e "
          try {
            const data = JSON.parse(require('fs').readFileSync('data/bets.json', 'utf8'));
            
            const pendingBets = data.active_bets.filter(bet => bet.status === 'pending');
            const confirmedBets = data.active_bets.filter(bet => bet.status === 'confirmed');
            const recentConfirmations = confirmedBets
              .sort((a, b) => b.confirmedAt - a.confirmedAt)
              .slice(0, 5);
            
            const summary = {
              total_bets: data.statistics.total_bets,
              pending_bets: pendingBets.length,
              confirmed_bets: confirmedBets.length,
              total_volume: data.statistics.total_volume,
              total_users: data.metadata.total_users,
              recent_confirmations: recentConfirmations.map(bet => ({
                betId: bet.betId,
                warId: bet.warId,
                factionId: bet.factionId,
                xanaxAmount: bet.xanaxAmount,
                playerId: bet.playerId,
                confirmedAt: new Date(bet.confirmedAt).toISOString()
              }))
            };
            
            console.log(JSON.stringify(summary, null, 2));
          } catch (error) {
            console.error('Error creating summary:', error);
          }
          ")
          
          echo "confirmation_summary<<EOF" >> $GITHUB_OUTPUT
          echo "$SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "No bets.json found"
        fi
        
    - name: Commit and Push Changes
      run: |
        echo "💾 Committing and pushing changes..."
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add changes
        git add data/bets.json data/bet-logs.json
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          # Commit changes
          git commit -m "✅ Automated bet confirmation processing - $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          
          📊 Summary:
          - Confirmations processed: ${{ fromJson(steps.process-confirmations.outputs.summary).confirmations_processed || 0 }}
          - New bets added: ${{ fromJson(steps.process-confirmations.outputs.summary).new_bets_added || 0 }}
          - Total active bets: ${{ fromJson(steps.process-confirmations.outputs.summary).total_active_bets || 0 }}
          - Pending bets: ${{ fromJson(steps.process-confirmations.outputs.summary).pending_bets || 0 }}
          - Confirmed bets: ${{ fromJson(steps.process-confirmations.outputs.summary).confirmed_bets || 0 }}
          
          👥 Total users: ${{ fromJson(steps.process-confirmations.outputs.summary).total_users || 0 }}"
          
          # Push changes
          git push
          echo "✅ Changes committed and pushed"
        fi
        
    - name: Create Summary Comment
      if: github.event_name == 'workflow_dispatch'
      uses: actions/github-script@v7
      with:
        script: |
          const summary = ${{ fromJson(steps.create-summary.outputs.confirmation_summary) }};
          
          if (summary) {
            const comment = `
            ## ✅ Bet Confirmation Processing Summary
            
            **📊 Statistics:**
            - Total bets: ${summary.total_bets}
            - Pending bets: ${summary.pending_bets}
            - Confirmed bets: ${summary.confirmed_bets}
            - Total volume: ${(summary.total_volume / 1000000).toFixed(1)}M
            - Total users: ${summary.total_users}
            
            **🕒 Recent Confirmations:**
            ${summary.recent_confirmations.map(bet => `
            - Bet ID: ${bet.betId} | War: ${bet.warId} | Faction: ${bet.factionId} | Xanax: ${bet.xanaxAmount} | Player: ${bet.playerId}
            `).join('')}
            
            **✅ Status:** Confirmation processing completed successfully
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } 