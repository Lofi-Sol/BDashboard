name: Bet Log Processor

on:
  schedule:
    # Run every 10 minutes
    - cron: '*/10 * * * *'
  workflow_dispatch: # Allow manual triggering
  push:
    paths:
      - '.github/workflows/bet-log-processor.yml'

jobs:
  process-bet-logs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Fetch Torn City Logs
      id: fetch-logs
      run: |
        echo "üîÑ Fetching Torn City logs..."
        
        # Fetch logs from Torn API
        LOGS_RESPONSE=$(curl -s "https://api.torn.com/user/?selections=log&key=${{ secrets.TORN_API_KEY }}&comment=BetLogProcessor")
        
        # Check if API call was successful
        if echo "$LOGS_RESPONSE" | grep -q '"error"'; then
          echo "‚ùå Error fetching logs:"
          echo "$LOGS_RESPONSE"
          exit 1
        fi
        
        echo "‚úÖ Successfully fetched logs"
        echo "logs_response<<EOF" >> $GITHUB_OUTPUT
        echo "$LOGS_RESPONSE" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Process and Filter Bet Logs
      id: process-logs
      run: |
        echo "üîç Processing and filtering bet logs..."
        
        # Create data directory if it doesn't exist
        mkdir -p data
        
        # Parse the logs and filter for bet confirmations
        node -e "
        const logsResponse = \`${{ steps.fetch-logs.outputs.logs_response }}\`;
        
        try {
          const data = JSON.parse(logsResponse);
          
          if (!data.log) {
            console.log('No logs found in response');
            process.exit(0);
          }
          
          const betLogs = [];
          const processedLogs = [];
          
          // Process each log entry
          Object.entries(data.log).forEach(([logId, logEntry]) => {
            // Check if this is a bet confirmation log
            if (logEntry.title === 'Item receive' && 
                logEntry.category === 'Item sending' &&
                logEntry.data && 
                logEntry.data.items) {
              
              // Check if any item is Xanax (ID: 206)
              const xanaxItem = logEntry.data.items.find(item => item.id === 206);
              
              if (xanaxItem && logEntry.data.message) {
                // Check if message matches bet format: BET:warId:factionId:amount:betId
                const betMatch = logEntry.data.message.match(/^BET:(\d+):(\d+):(\d+):([A-Z0-9]+)$/);
                
                if (betMatch) {
                  const [, warId, factionId, xanaxAmount, betId] = betMatch;
                  
                  // Verify Xanax amount matches
                  if (parseInt(xanaxAmount) === xanaxItem.qty) {
                    betLogs.push({
                      logId: logId,
                      timestamp: logEntry.timestamp,
                      sender: logEntry.data.sender,
                      warId: parseInt(warId),
                      factionId: parseInt(factionId),
                      xanaxAmount: parseInt(xanaxAmount),
                      betId: betId,
                      message: logEntry.data.message,
                      processed: false
                    });
                  }
                }
              }
            }
            
            // Track all processed logs to avoid duplicates
            processedLogs.push({
              logId: logId,
              timestamp: logEntry.timestamp,
              title: logEntry.title,
              category: logEntry.category
            });
          });
          
          console.log(\`Found \${betLogs.length} bet confirmation logs\`);
          
          // Load existing bet logs data
          let existingData = { bet_logs: [], processed_logs: [], metadata: {} };
          try {
            const existingContent = require('fs').readFileSync('data/bet-logs.json', 'utf8');
            existingData = JSON.parse(existingContent);
          } catch (error) {
            console.log('No existing bet-logs.json found, creating new file');
          }
          
          // Add new bet logs (avoid duplicates)
          const existingLogIds = new Set(existingData.bet_logs.map(log => log.logId));
          const newBetLogs = betLogs.filter(log => !existingLogIds.has(log.logId));
          
          if (newBetLogs.length > 0) {
            existingData.bet_logs.push(...newBetLogs);
            console.log(\`Added \${newBetLogs.length} new bet logs\`);
          }
          
          // Update processed logs
          const existingProcessedIds = new Set(existingData.processed_logs.map(log => log.logId));
          const newProcessedLogs = processedLogs.filter(log => !existingProcessedIds.has(log.logId));
          
          if (newProcessedLogs.length > 0) {
            existingData.processed_logs.push(...newProcessedLogs);
          }
          
          // Update metadata
          existingData.metadata = {
            last_updated: new Date().toISOString(),
            total_bet_logs: existingData.bet_logs.length,
            total_processed_logs: existingData.processed_logs.length,
            new_bet_logs_found: newBetLogs.length,
            new_processed_logs: newProcessedLogs.length,
            run_timestamp: new Date().toISOString()
          };
          
          // Write updated data
          require('fs').writeFileSync('data/bet-logs.json', JSON.stringify(existingData, null, 2));
          
          console.log('‚úÖ Bet logs processed and saved');
          console.log(\`Total bet logs: \${existingData.bet_logs.length}\`);
          console.log(\`Total processed logs: \${existingData.processed_logs.length}\`);
          
        } catch (error) {
          console.error('‚ùå Error processing logs:', error);
          process.exit(1);
        }
        "
        
    - name: Create Bet Confirmation Summary
      id: create-summary
      run: |
        echo "üìä Creating bet confirmation summary..."
        
        # Load the processed data
        if [ -f "data/bet-logs.json" ]; then
          SUMMARY=$(node -e "
          try {
            const data = JSON.parse(require('fs').readFileSync('data/bet-logs.json', 'utf8'));
            
            const pendingBets = data.bet_logs.filter(log => !log.processed);
            const processedBets = data.bet_logs.filter(log => log.processed);
            
            const summary = {
              total_bet_logs: data.bet_logs.length,
              pending_confirmations: pendingBets.length,
              processed_confirmations: processedBets.length,
              last_updated: data.metadata.last_updated,
              recent_bets: pendingBets.slice(0, 5).map(bet => ({
                betId: bet.betId,
                warId: bet.warId,
                factionId: bet.factionId,
                xanaxAmount: bet.xanaxAmount,
                sender: bet.sender,
                timestamp: new Date(bet.timestamp * 1000).toISOString()
              }))
            };
            
            console.log(JSON.stringify(summary, null, 2));
          } catch (error) {
            console.error('Error creating summary:', error);
          }
          ")
          
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "No bet-logs.json found"
        fi
        
    - name: Commit and Push Changes
      run: |
        echo "üíæ Committing and pushing changes..."
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add changes
        git add data/bet-logs.json
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          # Commit changes
          git commit -m "ü§ñ Automated bet log processing - $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          
          üìä Summary:
          - Total bet logs: ${{ fromJson(steps.create-summary.outputs.summary).total_bet_logs || 0 }}
          - Pending confirmations: ${{ fromJson(steps.create-summary.outputs.summary).pending_confirmations || 0 }}
          - Processed confirmations: ${{ fromJson(steps.create-summary.outputs.summary).processed_confirmations || 0 }}
          
          üîÑ Last updated: ${{ fromJson(steps.create-summary.outputs.summary).last_updated || 'N/A' }}"
          
          # Push changes
          git push
          echo "‚úÖ Changes committed and pushed"
        fi
        
    - name: Create Summary Comment
      if: github.event_name == 'workflow_dispatch'
      uses: actions/github-script@v7
      with:
        script: |
          const summary = ${{ fromJson(steps.create-summary.outputs.summary) }};
          
          if (summary) {
            const comment = \`
            ## ü§ñ Bet Log Processing Summary
            
            **üìä Statistics:**
            - Total bet logs: \${summary.total_bet_logs}
            - Pending confirmations: \${summary.pending_confirmations}
            - Processed confirmations: \${summary.processed_confirmations}
            
            **üïí Last Updated:** \${summary.last_updated}
            
            **üìã Recent Pending Bets:**
            \${summary.recent_bets.map(bet => \`
            - Bet ID: \${bet.betId} | War: \${bet.warId} | Faction: \${bet.factionId} | Xanax: \${bet.xanaxAmount} | Sender: \${bet.sender}
            \`).join('')}
            
            **‚úÖ Status:** Processing completed successfully
            \`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } 